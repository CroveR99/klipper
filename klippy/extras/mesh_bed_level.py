# Mesh Bed Leveling
#
# Copyright (C) 2018  Kevin O'Connor <kevin@koconnor.net>
#
# This file may be distributed under the terms of the GNU GPLv3 license.
import logging
import math
import probe, mathutil

# TODO: The values below are for Prusa i3 MK3 only.  I should
# retreive these from the config, along with the actual
# probe points.
PROBE_X_COUNT = 3
PROBE_Y_COUNT = 3
BED_ZERO_REF_X = 2.
BED_ZERO_REF_Y = 9.4

class MeshLeveler:
    def __init__(self, config):
        self.printer = config.get_printer()
        self.z_adjust = 0.
        self.z_factor = 1.
        self.calibrate = MeshLevelCalibrate(config, self)
        self.mesh_z = ZMesh(config)
        self.toolhead = None
        self.probed_z_table = None
        self.horizontal_move_z = config.getfloat('horizontal_move_z', 5.)
        #self.probe_x_count = config.getint('probe_x_count', 3)
        #self.probe_y_count = config.getint('probe_y_count' 3)
        self.gcode = self.printer.lookup_object('gcode')
        self.gcode.register_command(
            'GET_MEASURED_POINTS', self.cmd_GET_MEASURED_POINTS,
            desc=self.cmd_GET_MEASURED_POINTS_help)
        # Register G81 as alias
        self.gcode.register_command(
            'G81', self.cmd_GET_MEASURED_POINTS,
            desc=self.cmd_GET_MEASURED_POINTS_help)
        self.gcode.set_move_transform(self)
    def printer_state(self, state):
        if state == 'connect':
            self.toolhead = self.printer.lookup_object('toolhead')
    def set_probed_z_table(self, z_table):
        self.probed_z_table = z_table
        if z_table is not None:
            self.mesh_z.build_mesh(z_table)
        else:
            self.mesh_z_positions = None
    def get_position(self):
        if self.probed_z_table is None:
            # No mesh calibrated, so simply send toolhead position
            return self.toolhead.get_position()
        else:
            # TODO: Get Position expects the cartesian position minus any
            # adjustments made by this class.  In our case, the Z position
            # will be determined by:
            # -The mesh generated by probing.  X,Y coordinates are used to 
            # look up a table
            # - The current layer if we choose to phase out leveling
            # - Any offset generated by a change in temperature of the Pinda probe
            # (Pinda functionality could be implement by using the Z_Offset Gcode, and
            # possibly should to simplify this functionality and decouple it from
            # mesh leveling)
            x, y, z, e = self.toolhead.get_position()
            return [x, y, z - self.z_adjust, e]
    def move(self, newpos, speed):
        if self.probed_z_table is None:
            # No mesh calibrated just perform stock move
            self.toolhead.move(newpos, speed)
        else:
            # Get last position 
            #old_x, old_y, old_z, old_e = self.toolhead.get_position()
            # TODO: calculate the next moves z-offset based on a grid and the 
            # generated mesh OR traverse the move until too a threshold on
            # z-axis the delta is acheived:
            # Adjustment should be phased out after an achieved delta is reached

            # TODO: This just performs a stock move, no transform is happening
            # at this point (self.z_adjust is always 0)
            x, y, z, e = newpos
            self.toolhead.move([x, y, z + self.z_adjust, e], speed)      
    cmd_GET_MEASURED_POINTS_help = "Retreive interpolated grid of probed z-points"
    def cmd_GET_MEASURED_POINTS(self, params):
        if self.probed_z_table is None:
            self.gcode.respond_info("Bed has not been probed")
        else:
             # Temporarily respond with the 9 Z values for testing
            msg = "Mesh Leveling Probed Z positions:\n"
            for line in self.probed_z_table:
                msg += "%f %f %f\n" % (line[0], line[1], line[2])
            logging.debug(msg)

            # Upsample to a 7x7 mesh
            msg = "Num X,Y: %d,%d\n" % (self.mesh_z.mesh_x_count, self.mesh_z.mesh_y_count) 
            msg +="Search Height: %d\n" % (self.horizontal_move_z)
            # Bring all numbers above zero.  Many interpreters don't like
            # Negative numbers
            min_z = min([min(line) for line in self.mesh_z.mesh_z_table])
            if min_z < 0:
                min_z *= -1.
            else:
                min_z = 0.
            msg += "Measured points:\n"
            for y_line in range(self.mesh_z.mesh_x_count - 1, -1, -1):
                for z in self.mesh_z.mesh_z_table[y_line]:
                    msg += "  %f" % (z + min_z)
                msg += "\n"
            self.gcode.respond(msg)              

class MeshLevelCalibrate:
    def __init__(self, config, meshleveler):
        self.printer = config.get_printer()
        self.meshleveler = meshleveler
        #TODO: Instead of calculating probe points, add them to config
        self.probe_helper = probe.ProbePointsHelper(config, self, 
                                                    self.calculate_probe_points())
        # Automatic probe:z_virtual_endstop XY detection
        self.z_position_endstop = None
        if config.has_section('stepper_z'):
            zconfig = config.getsection('stepper_z')
            self.z_position_endstop = zconfig.getfloat('position_endstop', None)
        # Register MESH_BED_LEVING command
        self.gcode = self.printer.lookup_object('gcode')
        self.gcode.register_command(
            'MESH_BED_LEVELING', self.cmd_MESH_BED_LEVELING,
            desc=self.cmd_MESH_BED_LEVELING_help)
        # Register G80 as alias
        self.gcode.register_command(
            'G80', self.cmd_MESH_BED_LEVELING,
            desc=self.cmd_MESH_BED_LEVELING_help)
    def calculate_probe_points(self):
        probe_points = [
            (13.- BED_ZERO_REF_X, 10.4 - BED_ZERO_REF_Y),
            (115.- BED_ZERO_REF_X, 10.4 - BED_ZERO_REF_Y),
            (216. - BED_ZERO_REF_X, 10.4 - BED_ZERO_REF_Y),
            (216. - BED_ZERO_REF_X, 106.4 - BED_ZERO_REF_Y),
            (115. - BED_ZERO_REF_X, 106.4 - BED_ZERO_REF_Y),
            (13. - BED_ZERO_REF_X, 106.4 - BED_ZERO_REF_Y),
            (13. - BED_ZERO_REF_X, 202.4 - BED_ZERO_REF_Y),
            (115. - BED_ZERO_REF_X, 202.4 - BED_ZERO_REF_Y),
            (216. - BED_ZERO_REF_X, 202.4 - BED_ZERO_REF_Y),
        ]
        return probe_points
    cmd_MESH_BED_LEVELING_help = "Perform Mesh Bed Leveling"
    def cmd_MESH_BED_LEVELING(self, params):
        self.meshleveler.set_probed_z_table(None)
        self.gcode.run_script("G28")
        self.probe_helper.start_probe()
        self.gcode.run_script("G1 X0 Y0 F3000")
    def get_position(self):
        kin = self.printer.lookup_object('toolhead').get_kinematics()
        return kin.get_position()
    def finalize(self, z_offset, positions):
        # create a 2-D array representing the probed z-positions.  First
        # dimension is y, second dimension is x
        z_table = [[0. for i in range(PROBE_X_COUNT)] 
                       for j in range(PROBE_Y_COUNT)]
        # Extract probed z-positions from probed positions and add
        # them to organized list
        for i, pos in enumerate(positions):
            y_position = i / PROBE_X_COUNT
            x_position = 0
            if y_position & 1 == 0:
                # Even y count, x probed in positive directon
                x_position = i % PROBE_X_COUNT
            else:
                # Odd y count, x probed in the negative directon
                x_position = (PROBE_X_COUNT - 1) - (i % PROBE_X_COUNT)
            z_table[y_position][x_position] = pos[2] - z_offset
        self.meshleveler.set_probed_z_table(z_table)
        self.gcode.respond_info("Mesh Bed Leveling Complete")
       
class ZMesh:
    def __init__(self, config, mesh_x_count=None, mesh_y_count=None):
        self.mesh_z_table = None
        # TODO: variables below should probably have min values
        self.mesh_x_min = config.getfloat('mesh_x_min', 35.)
        self.mesh_x_max = config.getfloat('mesh_x_max', 238.)
        self.mesh_y_min = config.getfloat('mesh_y_min', 6.)
        self.mesh_y_max = config.getfloat('mesh_y_max', 202.)
        if not mesh_x_count:
            self.mesh_x_count = config.getint('mesh_x_count', 7, minval=5)
        elif mesh_x_count < 5:
            config.error("mesh_x_count cannot be less than 5")
        if not mesh_y_count:
            self.mesh_y_count = config.getint('mesh_y_count', 7, minval=5)
        elif mesh_y_count < 5:
            config.error("mesh_y_count cannot be less than 5")
        if not (self.mesh_x_count & 1):
            config.error("mesh_y_count must be an odd value")
        if not (self.mesh_y_count & 1):
            config.error("mesh_y_count must be an odd value")
        self.mesh_x_dist = (self.mesh_x_max - self.mesh_x_min) / (self.mesh_x_count - 1)
        self.mesh_y_dist = (self.mesh_y_max - self.mesh_y_min) / (self.mesh_y_count - 1)
    def get_x_coordinate(self, index):
        return self.mesh_x_min + self.mesh_x_dist * index
    def get_y_coordinate(self, index):
        return self.mesh_y_min + self.mesh_y_dist * index
    def get_adjusted_z(self, pos_x, pos_y):
        if self.mesh_z_table:
            #TODO:Spline interpolation or linear interpolation?
            return 0.
        else:
            return 0.
    def build_mesh(self, probed_z_table):
        self._sample_3x3(probed_z_table)
    def _sample_3x3(self, probed_z_table):
        self.mesh_z_table= [[0. for i in range(self.mesh_x_count)] 
                      for j in range(self.mesh_y_count)]
        x_center = int(self.mesh_x_count / 2)
        x_last = self.mesh_x_count - 1
        y_center = int(self.mesh_y_count / 2)
        y_last = self.mesh_y_count - 1
        #Interpolate X axis points
        x0 = self.mesh_x_min
        x1 = (self.mesh_x_min + self.mesh_x_max) * .5
        x2 = self.mesh_x_max
        for i in range(3):
            y_idx = i * y_center
            self.mesh_z_table[y_idx][0] = probed_z_table[i][0]
            self.mesh_z_table[y_idx][x_center] = probed_z_table[i][1]
            self.mesh_z_table[y_idx][x_last] = probed_z_table[i][2]
            for j in range(1, x_last):
                if j == x_center:
                    continue
                x = self.get_x_coordinate(j)
                self.mesh_z_table[y_idx][j] = \
                    probed_z_table[i][0] * (x - x1) * (x - x2) / ((x0 - x1) * (x0 - x2)) + \
                    probed_z_table[i][1] * (x - x0) * (x - x2) / ((x1 - x0) * (x1 - x2)) + \
                    probed_z_table[i][2] * (x - x0) * (x - x1) / ((x2 - x0) * (x2 - x1))
        y0 = self.mesh_y_min
        y1 = (self.mesh_y_min + self.mesh_y_max) * .5
        y2 = self.mesh_y_max
        for i in range(self.mesh_x_count):
            for j in range(1, y_last):
                if j == y_center:
                    continue
                y = self.get_y_coordinate(j)
                self.mesh_z_table[j][i] = \
                    self.mesh_z_table[0][i] * (y - y1) * (y - y2) / ((y0 - y1) * (y0 - y2)) + \
                    self.mesh_z_table[y_center][i] * (y - y0) * (y - y2) / ((y1 - y0) * (y1 - y2)) + \
                    self.mesh_z_table[y_last][i] * (y - y0) * (y - y1) / ((y2 - y0) * (y2 - y1))

def load_config(config):
    return MeshLeveler(config)
